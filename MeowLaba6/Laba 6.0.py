import matplotlib as plt

x = [10, 100, 1000, 10000, 100000, 1000000]

#1: Відсортовані дані
y1_1 = [15, 316, 4932, 64608, 815024, 9884992]
#y1_1 = [34, 672, 9976, 133616, 1668928, 19951424]
#y1_1 = [0.0, 0.01, 0.0, 0.075, 0.95, 11.58]
#y1_1 = [400, 2016, 18224, 180224, 1800224, 18000224]

y1_2 = [21, 372, 5052, 71712, 877968, 10095552]
#y1_2 = [40, 700, 10000, 140000, 1700000, 20000000]
#y1_2 = [0.0, 0.0, 0.008, 0.085, 0.99, 11.64]
#y1_2 = [344, 1872, 17176, 170176, 1700176, 17000176]

y1_3 = [0, 0, 0, 0, 0, 0]
#y1_3 = [0, 0, 0, 0, 0, 0]
#y1_3 = [0.0, 0.0, 0.0, 0.00998, 0.06, 0.735]
#y1_3 = [344, 1872, 17176, 170176, 1700176, 17000176]

y1_4 = [46, 1001, 15501, 210001, 2650001, 32000001]
#y1_4 = [30, 600, 9000, 120000, 1500000, 18000000]
#y1_4 = [0.0, 0.0025, 0.0156, 0.3124, 3.86, 48.28]
#y1_4 = [344, 1872, 17176, 170176, 1700176, 17000176]

plt.plot(x, y1_1, color='red', label='Рекурсивний MergeSort')
plt.plot(x, y1_2, color='orange', label='Ітеративний MergeSort')
plt.plot(x, y1_3, color='green', label='Ітеративний MergeSort з оптимізаціями')
plt.plot(x, y1_4, color='blue', label='Ітеративний MergeSort з поділом на 10 частин')
plt.title("Кількість операцій 'порівняння' при відсортованих даних")
#plt.title("Кількість операцій 'копіювання' при відсортованих даних")
#plt.title("Час виконання сортування при відсортованих даних")
#plt.title("Кількість використаної пам'яті при відсортованих даних")
plt.xlabel('Розмір даних')
plt.ylabel("Кількість операцій")
#plt.ylabel("Час виконання")
#plt.ylabel("Кількість використаної пам'яті")
plt.legend()
plt.show()


"""#2: Випадкові дані
y2_1 = [23, 530, 8687, 120483, 1536135, 18673840]
#y2_1 = [34, 672, 9976, 133616, 1668928, 19951424]
#y2_1 = [0.0, 0.0, 0.015, 0.14, 1.61, 20.9]
#y2_1 = [400, 1920, 18136, 177736, 1724576, 17697576]

y2_2 = [26, 560, 8713, 123618, 1566360, 18715434]
#y2_2 = [40, 700, 10000, 140000, 1700000, 20000000]
#y2_2 = [0.0, 0.0, 0.015, 0.13, 1.66, 21.02]
#y2_2 = [344, 1872, 17176, 170176, 1700176, 17000176]

y2_3 = [8, 377, 7404, 104221, 1359739, 17465820]
#y2_3 = [20, 796, 15364, 213680, 2771568, 35453404]
#y2_3 = [0.0, 0.0, 0.01, 0.12, 1.63, 22.475]
#y2_3 = [344, 1872, 17176, 170176, 1700176, 17000176]

y2_4 = [48, 1154, 19346, 291595, 3919839, 49430851]
#y2_4 = [30, 600, 9000, 120000, 1500000, 18000000]
#y2_4 = [0.0097, 0.0025, 0.04686, 0.61, 7.47, 94.85]
#y2_4 = [344, 1872, 17176, 170176, 1700176, 17000176]

plt.plot(x, y2_1, color='red', label='Рекурсивний MergeSort')
plt.plot(x, y2_2, color='orange', label='Ітеративний MergeSort')
plt.plot(x, y2_3, color='green', label='Ітеративний MergeSort з оптимізаціями')
plt.plot(x, y2_4, color='blue', label='Ітеративний MergeSort з поділом на 10 частин')
plt.title("Кількість операцій 'порівняння' при випадкових даних")
#plt.title("Кількість операцій 'копіювання' при випадкових даних")
#plt.title("Час виконання сортування при випадкових даних")
#plt.title("Кількість використаної пам'яті при випадкових даних")
plt.xlabel('Розмір даних')
plt.ylabel("Кількість операцій")
#plt.ylabel("Час виконання")
#plt.ylabel("Кількість використаної пам'яті")
plt.legend()
plt.show()"""


"""#3: Майже відсортовані дані
y3_1 = [18, 400, 5521, 71151, 863318, 10789240]
#y3_1 = [34, 672, 9976, 133616, 1668928, 19951424]
#y3_1 = [0.0, 0.0, 0.005, 0.09, 0.975, 12.38]
#y3_1 = [400, 2016, 18224, 177736, 1800224, 18000224]

y3_2 = [22, 398, 5863, 81967, 886153, 10772234]
#y3_2 = [40, 700, 10000, 140000, 1700000, 20000000]
#y3_2 = [0.0, 0.0, 0.0064, 0.09, 1.01, 12.1]
#y3_2 = [344, 1872, 17176, 170176, 1700176, 17000176]

y3_3 = [9, 180, 1586, 10238, 176309, 1572889]
#y3_3 = [20, 452, 4452, 27636, 452252, 4077584]
#y3_3 = [0.0, 0.0, 0.0, 0.00995, 0.27, 2.455]
#y3_3 = [344, 1872, 17176, 170176, 1700176, 17000176]

y3_4 = [46, 1012, 15871, 215557, 2736307, 32668336]
#y3_4 = [30, 600, 9000, 120000, 1500000, 18000000]
#y3_4 = [0.0, 0.0, 0.03, 0.328, 3.8, 48.39]
#y3_4 = [344, 1872, 17176, 170176, 1700176, 17000176]

plt.plot(x, y3_1, color='red', label='Рекурсивний MergeSort')
plt.plot(x, y3_2, color='orange', label='Ітеративний MergeSort')
plt.plot(x, y3_3, color='green', label='Ітеративний MergeSort з оптимізаціями')
plt.plot(x, y3_4, color='blue', label='Ітеративний MergeSort з поділом на 10 частин')
plt.title("Кількість операцій 'порівняння' при майже відсортованих даних")
#plt.title("Кількість операцій 'копіювання' при майже відсортованих даних")
#plt.title("Час виконання сортування при майже відсортованих даних")
#plt.title("Кількість використаної пам'яті при майже відсортованих даних")
plt.xlabel('Розмір даних')
plt.ylabel("Кількість операцій")
#plt.ylabel("Час виконання")
#plt.ylabel("Кількість використаної пам'яті")
plt.legend()
plt.show()"""


"""#4: Відсортовані у зворотньому порядку дані
y4_1 = [19, 356, 5044, 69008, 853904, 10066432]
#y4_1 = [34, 672, 9976, 133616, 1668928, 19951424]
#y4_1 = [0.0, 0.0, 0.01, 0.075, 0.97, 11.57]
#y4_1 = [400, 2016, 18224, 180224, 1800224, 18000224]

y4_2 = [15, 316, 4932, 64608, 815024, 9884992]
#y4_2 = [40, 700, 10000, 140000, 1700000, 20000000]
#y4_2 = [0.0, 0.0, 0.007, 0.075, 0.926, 11.33]
#y4_2 = [344, 1872, 17176, 170176, 1700176, 17000176]

y4_3 = [3, 181, 3433, 50448, 677321, 8424605]
#y4_3 = [20, 796, 15364, 213680, 2771624, 35454048]
#y4_3 = [0.0, 0.0, 0.0096, 0.1099, 1.32, 16.72]
#y4_3 = [344, 1872, 17176, 170176, 1700176, 17000176]

y4_4 = [54, 1098, 16560, 221481, 2773692, 33325803]
#y4_4 = [30, 600, 9000, 120000, 1500000, 18000000]
#y4_4 = [0.0, 0.005, 0.016, 0.2967, 3.6, 45.95]
#y4_4 = [344, 1872, 17176, 170176, 1700176, 17000176]

plt.plot(x, y4_1, color='red', label='Рекурсивний MergeSort')
plt.plot(x, y4_2, color='orange', label='Ітеративний MergeSort')
plt.plot(x, y4_3, color='green', label='Ітеративний MergeSort з оптимізаціями')
plt.plot(x, y4_4, color='blue', label='Ітеративний MergeSort з поділом на 10 частин')
plt.title("Кількість операцій 'порівняння' при відсортованих у зворотньому порядку даних")
#plt.title("Кількість операцій 'копіювання' при відсортованих у зворотньому порядку даних")
#plt.title("Час виконання сортування при відсортованих у зворотньому порядку даних")
#plt.title("Кількість використаної пам'яті при відсортованих у зворотньому порядку даних")
plt.xlabel('Розмір даних')
plt.ylabel("Кількість операцій")
#plt.ylabel("Час виконання")
#plt.ylabel("Кількість використаної пам'яті")
plt.legend()
plt.show()"""


"""#5: Дані з кількома унікальними значеннями
y5_1 = [24, 516, 8182, 111380, 1413460, 17128905]
#y5_1 = [34, 672, 9976, 133616, 1668928, 19951424]
#y5_1 = [0.0, 0.0, 0.009, 0.13, 1.49, 18]
#y5_1 = [400, 1920, 18224, 180224, 1800224, 18000224]

y5_2 = [26, 539, 8193, 115189, 1450605, 17208641]
#y5_2 = [40, 700, 10000, 140000, 1700000, 20000000]
#y5_2 = [0.0, 0.0, 0.0016, 0.13, 1.49, 17.9]
#y5_2 = [344, 1872, 17176, 170176, 1700176, 17000176]

y5_3 = [9, 351, 6957, 96132, 1243646, 15984258]
#y5_3 = [20, 796, 15364, 213652, 2771428, 35451500]
#y5_3 = [0.0, 0.0, 0.00995, 0.11, 1.425, 18.22]
#y5_3 = [344, 1872, 17176, 170176, 1700176, 17000176]

y5_4 = [51, 1099, 17014, 229636, 2796924, 33520773]
#y5_4 = [30, 600, 9000, 120000, 1500000, 18000000]
#y5_4 = [0.0, 0.0, 0.04686, 0.61, 7.37, 93.78]
#y5_4 = [344, 1872, 17176, 170176, 1700176, 17000176]

plt.plot(x, y5_1, color='red', label='Рекурсивний MergeSort')
plt.plot(x, y5_2, color='orange', label='Ітеративний MergeSort')
plt.plot(x, y5_3, color='green', label='Ітеративний MergeSort з оптимізаціями')
plt.plot(x, y5_4, color='blue', label='Ітеративний MergeSort з поділом на 10 частин')
plt.title("Кількість операцій 'порівняння' при даних з кількома унікальними значеннями")
#plt.title("Кількість операцій 'копіювання' при даних з кількома унікальними значеннями")
#plt.title("Час виконання сортування при даних з кількома унікальними значеннями")
#plt.title("Кількість використаної пам'яті при даних з кількома унікальними значеннями")
plt.xlabel('Розмір даних')
plt.ylabel("Кількість операцій")
#plt.ylabel("Час виконання")
#plt.ylabel("Кількість використаної пам'яті")
plt.legend()
plt.show()"""